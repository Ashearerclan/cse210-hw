Common built-in variable types are:

int - Integers (whole numbers, positive and negative)

string - Strings (a sequence of characters, including letters, numbers, or symbols)

float - Floating point numbers (numbers that use decimals)

double - Double precision floating point numbers (just like a float, except it takes up 
twice as much memory, so it can hold larger numbers or numbers with more decimal places)

bool - Boolean variables (true or false)


Input and Output

In C#, to print, or write something as output to the console, 
you use the Console.WriteLine("") function.

Python

color = input("What is your favorite color? ")

C#

Console.Write("What is your favorite color? ");
string color = Console.ReadLine();


String Interpolation
In C#, if you would like to use a variable inside a string,
you start the string with a dollar sign $ in the same way that in Python,
you start a format string with an f.

Python

school = "BYU-Idaho"
print(f"I am studying at {school}.")

C#

string school = "BYU-Idaho";
Console.WriteLine($"I am studying at {school}.");


If Statements

First, the condition of the if statement must be put in parentheses (). 
Then, to define the body of the if statement, you still indent by convention, 
but it is the curly braces {} that define the body. 
(You also do not use the colon : that Python does to start the block.)

C#

if (x > y)
{
    Console.WriteLine("greater than");
}

Python

if x > y:
    print("greater than")


Else and Else If
C# supports else and else if, similar to else and elif in Python.
The else condition defines a body, just like the if condition:

C#

if (x > y)
{
    Console.WriteLine("greater than");
}
else
{
    Console.WriteLine("less than");
}

Python

if x > y:
    print("greater than")
else:
    print("less than")

C# uses else if not elif*


Operators
C# uses the == operator to check if two variables are equal, just like in Python. 
It also supports other operators you are familiar with, such as !=, >=, <=, and so forth:

if (name == "John")
{
    Console.WriteLine("The name is John");
}

if (color != favoriteColor)
{
    Console.WriteLine("That color is not my favorite");
}


And, Or, and Not Operators
In C#, the and operator is && the or operator is || and the not operator is ! 
which can be combined together with other expressions and parentheses.


if (name == "Peter" || name == "James" || name == "John")
{
    Console.WriteLine("This is a biblical name.");
}

if (firstName == "Brigham" && lastName == "Young")
{
    Console.WriteLine("Welcome Brother Brigham!");
}

if (!(name == "Peter" || name == "James" || name == "John"))
{
    Console.WriteLine("This is a not one of those three");
}


Variables and Types
In C#, the naming convention for variables is to use "camel case." 
This means that the variable starts with a lower case letter and then additional 
words in the variable start with an upper case letter like humps on a camel:

string color;
string firstName;
string lastName;
int velocityBeforeImpactWasMade;


Converting Types
As mentioned before, in C#, all variables must have their data type defined when 
the variable is first declared. Once defined, variables cannot change type, 
so you cannot set a variable to an integer first and later reassign it to a string.

You can, however convert a the value of a variable to a different type. 
For example, you can create an integer from the digits stored in a string using the int.Parse() function.

string valueInText = "42";
int number = int.Parse(valueInText);
This is especially important if the value comes from the user via a Console.ReadLine() statement, 
which always returns a string:

Console.Write("What is your favorite number? ");
string userInput = Console.ReadLine();
int number = int.Parse(userInput);

If the user typed in something other than a number, 
this would result in type of error called a Runtime Exception.


Numbers to Strings
Similarly, an integer can be converted to a string using the .ToString() function of the variable.

int number = 42;
string textVersion = number.ToString();


While Loops

While loops in C# work exactly the same way as in Python or other languages. 
The only difference is that C# uses curly braces {} to define the body of the loop, 
and the condition, must be surrounded by parentheses ().

C#

string response = "yes";

while (response == "yes")
{
    Console.Write("Do you want to continue? ");
    response = Console.ReadLine();
}

Python

response = "yes"

while response == "yes":
    response = input("Do you want to continue? ")


Do-While Loops

Many languages have a construct called a do-while loop (Python does not). 
This loop works the same as a while loop, with the exception that the body of the loop runs once first, 
before the check is made for the first time. This means that the body of the loop is guaranteed to 
run at least once.

The syntax for a do-while loop is to use the keyword do, followed by the body, 
followed by the the while keyword with the expression and a semi-colon as shown:

string response;

do
{
    Console.Write("Do you want to continue? ");
    response = Console.ReadLine();
} while (response == "yes");


For Loops
The standard for loop in C# is more like a "for x in range" loop in Python. 
The condition has three parts, separated by semi-colons. The first initializes the value, 
the second is the condition to check, and the third is an increment step that is run at the end of each loop.

The following code shows the syntax of a for loop that counts from 0 to 9.

for (int i = 0; i < 10; i++)
{
    Console.WriteLine(i);
}

In that code, you will see the use of the ++ operator which increments the value in the variable by one.

The code above is the most common way to see one of these loops, 
but you could put other values or statements in these spots, such as counting from 2 to 20 by two's:

for (int i = 2; i <= 20; i = i + 2)
{
    Console.WriteLine(i);
}


Foreach Loops

C# contains a foreach loop that is similar to a standard for loop in Python. 
It is important to remember that the iterator variable must have its type defined, 
just like when declaring any other variable:

foreach (string color in colors)
{
    Console.WriteLine(color);
}

The foreach loop will be used extensively in the next preparation material that discusses lists.